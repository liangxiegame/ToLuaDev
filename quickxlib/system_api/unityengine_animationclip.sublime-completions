{
	"scope": "source.lua",
	"completions":
	[
		"local AnimationClip = UnityEngine.AnimationClip",
		"AnimationClip = UnityEngine.AnimationClip",
		"UnityEngine.AnimationClip.__eq()",
		"UnityEngine.AnimationClip.__tostring()",
		"UnityEngine.AnimationClip.length",
		"animationClip.length",
		"UnityEngine.AnimationClip.frameRate",
		"animationClip.frameRate",
		"UnityEngine.AnimationClip.wrapMode",
		"animationClip.wrapMode",
		"UnityEngine.AnimationClip.localBounds",
		"animationClip.localBounds",
		"UnityEngine.AnimationClip.legacy",
		"animationClip.legacy",
		"UnityEngine.AnimationClip.humanMotion",
		"animationClip.humanMotion",
		"UnityEngine.AnimationClip.events",
		"animationClip.events",
		{ "trigger": "UnityEngine.AnimationClip.New()","contents": "UnityEngine.AnimationClip.New()"},
		{ "trigger": "AnimationClip.New()","contents": "AnimationClip.New()"},
		"UnityEngine.AnimationClip.SampleAnimation",
		{ "trigger": "UnityEngine.AnimationClip.SampleAnimation(UnityEngine.GameObject:go,System.Single:time)","contents": "UnityEngine.AnimationClip.SampleAnimation(${1:UnityEngine.GameObject:go},${2:System.Single:time})"},
		{ "trigger": ":SampleAnimation(UnityEngine.GameObject:go,System.Single:time)","contents": "SampleAnimation(${1:UnityEngine.GameObject:go},${2:System.Single:time})"},
		{ "trigger": "animationClip:SampleAnimation(UnityEngine.GameObject:go,System.Single:time)","contents": "animationClip:SampleAnimation(${1:UnityEngine.GameObject:go},${2:System.Single:time})"},
		"UnityEngine.AnimationClip.SetCurve",
		{ "trigger": "UnityEngine.AnimationClip.SetCurve(System.String:relativePath,System.Type:type,System.String:propertyName,UnityEngine.AnimationCurve:curve)","contents": "UnityEngine.AnimationClip.SetCurve(${1:System.String:relativePath},${2:System.Type:type},${3:System.String:propertyName},${4:UnityEngine.AnimationCurve:curve})"},
		{ "trigger": ":SetCurve(System.String:relativePath,System.Type:type,System.String:propertyName,UnityEngine.AnimationCurve:curve)","contents": "SetCurve(${1:System.String:relativePath},${2:System.Type:type},${3:System.String:propertyName},${4:UnityEngine.AnimationCurve:curve})"},
		{ "trigger": "animationClip:SetCurve(System.String:relativePath,System.Type:type,System.String:propertyName,UnityEngine.AnimationCurve:curve)","contents": "animationClip:SetCurve(${1:System.String:relativePath},${2:System.Type:type},${3:System.String:propertyName},${4:UnityEngine.AnimationCurve:curve})"},
		"UnityEngine.AnimationClip.EnsureQuaternionContinuity",
		{ "trigger": "UnityEngine.AnimationClip.EnsureQuaternionContinuity()","contents": "UnityEngine.AnimationClip.EnsureQuaternionContinuity()"},
		{ "trigger": ":EnsureQuaternionContinuity()","contents": "EnsureQuaternionContinuity()"},
		{ "trigger": "animationClip:EnsureQuaternionContinuity()","contents": "animationClip:EnsureQuaternionContinuity()"},
		"UnityEngine.AnimationClip.ClearCurves",
		{ "trigger": "UnityEngine.AnimationClip.ClearCurves()","contents": "UnityEngine.AnimationClip.ClearCurves()"},
		{ "trigger": ":ClearCurves()","contents": "ClearCurves()"},
		{ "trigger": "animationClip:ClearCurves()","contents": "animationClip:ClearCurves()"},
		"UnityEngine.AnimationClip.AddEvent",
		{ "trigger": "UnityEngine.AnimationClip.AddEvent(UnityEngine.AnimationEvent:evt)","contents": "UnityEngine.AnimationClip.AddEvent(${1:UnityEngine.AnimationEvent:evt})"},
		{ "trigger": ":AddEvent(UnityEngine.AnimationEvent:evt)","contents": "AddEvent(${1:UnityEngine.AnimationEvent:evt})"},
		{ "trigger": "animationClip:AddEvent(UnityEngine.AnimationEvent:evt)","contents": "animationClip:AddEvent(${1:UnityEngine.AnimationEvent:evt})"},
		"UnityEngine.AnimationClip.op_Equality",
		{ "trigger": "UnityEngine.AnimationClip.op_Equality(UnityEngine.Object:x,UnityEngine.Object:y)","contents": "UnityEngine.AnimationClip.op_Equality(${1:UnityEngine.Object:x},${2:UnityEngine.Object:y})"},
		{ "trigger": "AnimationClip.op_Equality(UnityEngine.Object:x,UnityEngine.Object:y)","contents": "AnimationClip.op_Equality(${1:UnityEngine.Object:x},${2:UnityEngine.Object:y})"},
	]
}

